---
import Post from "../../../components/Post.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import BlogCollectionLayout from "../../../layouts/BlogCollectionLayout.astro";

export const prerender = true;

interface Props {
    posts: CollectionEntry<"blog">[];
}

export async function getStaticPaths() {
    const allBlogPosts = await getCollection("blog", ({ data }) => {
        return import.meta.env.PROD ? data.draft !== true : true;
    });
    const uniqueAuthors = [
        ...new Set(allBlogPosts.map((post) => post.data.authors).flat()),
    ];

    return uniqueAuthors.map((author) => {
        const filteredPosts = allBlogPosts.filter((post) =>
            post.data.authors.includes(author)
        );

        const sortedPosts = filteredPosts.sort((a, b) => {
            return b.data.publishDate.getTime() - a.data.publishDate.getTime();
        });
        return {
            params: { author },
            props: { posts: sortedPosts },
        };
    });
}

const { author } = Astro.params;
const { posts } = Astro.props;
---

<BlogCollectionLayout title={author}>
    <h1 class="tag">Author: {author}</h1>
    <ul class="post-archive">
        {posts.map((post) => <Post post={post} />)}
    </ul>
</BlogCollectionLayout>

<style>
    .content {
        padding-top: 64px;
        margin-right: auto;
        margin-left: auto;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: flex-start;
    }

    h1.tag {
        text-transform: capitalize;
        display: inline;
        font-family: Electrolize, sans-serif;
        color: #333;
    }

    .post-archive {
        max-width: 1000px;
        list-style-type: none;
        padding: 64px;
        margin-left: auto;
        margin-right: auto;
    }

    @media screen and (max-width: 991px) {
        .post-archive {
            margin-top: 0px;
            padding: 20px;
        }
    }
</style>
